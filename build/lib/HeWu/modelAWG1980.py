"""
Zhai Jinpeng, 翟锦鹏, 2022
Contact: 914962409@qq.com

implements the DNA Airblast Working Group model, first reported
at the 31 March 1980 meeting (at RDA, Marina del Rey, California)
from:
Stephen J. Speicher & Harold L. Brode (1980-81?)
"Analytical Approximation for Dynamic Pressure Versus Time"
and
"Revised Procedure for Analytic Approximation of Dynamic Pressure Versus Time"
"New Analytic Fit for Revised EM-1 Curves"

y  y=RM/x=RF
|    /       y=RA
|III/     __/ 
|  /II __/ 
| / __/
|/_/   I
//--------------x

"""


def _t_fa(r, W):
    """
    free-air-burst time-of-arrival in milliseconds
    W: yield, kilotons
    r: slant range, kft
    """

    m = W ** (1 / 3)

    return (
        0.5429 * m**3 - 21.185 * r * m**2 + 361.8 * r**2 * m + 2383 * r**3
    ) / (m**2 + 2.048 * r * m + 2.6872 * r**2)


def _t_a(gr, hob, W):
    """
    arrival time for bursts near surface
    (surface burst is approximated by supplying 2W, interpolated for cases
     between)
    gr: ground range, kilofeet
    hob: height of burst, kilofeet
    W: yield, kiloton
    """
    r = (gr**2 + hob**2) ** 0.5
    if gr < hob:
        return _t_fa(r, W)
    else:
        return _t_fa(r, W) * hob / gr + _t_fa(r, 2 * W) * (1 - hob / gr)


def _inv_t_a(tgt, g1, g2, hob, W, vlim=1e-6):
    """
    Solve for gr in _t_a(gr,hob,W) = tgt using the secant method.
    tgt: target time of arrival in milliseconds
    g1: first guess
    g2: second guess

    hob: height of burst, kilofeet
    W: yield, kiloton

    vlim:
        limit on the absolute function value deviation against the
        target generated by the proposed solution.

    returns ground range in kilofeet.
    """

    def f(x):
        return _t_a(x, hob, W) - tgt

    a = g1
    fa = f(a)
    b = g2
    fb = f(b)

    while abs(fb - fa) >= vlim:  # to be conservative, one more iteration
        c = b - fb * (b - a) / (fb - fa)
        fc = f(c)
        fa = fb
        a = b
        fb = fc
        b = c

    return c


def _PD(x):
    """
    zero HOB peak overpressure in psi
    x: scaled ground range in kft/kT**(1/3)
    """
    return 6.48 / x**1.2518 + 3.9727 / x**2.924


def _PK(y):
    """
    zero ground range overpressure in psi
    y: scaled burst height in kft/kT**(1/3)
    """
    return 11.049 / y**1.3069 + 6.0481 / y**3.4793


def _PE(x):
    """
    pressure along the y = RA curve in psi
    x: scaled ground range in kft/kT**(1/3)
    """
    RA = _RA(x)
    return (
        1.7934 / x**3.4227
        + 441830 * x**8.7266 / (1 + 28242 * x**9.661)
        - 5 * RA**2.2643 / (1 + 1.0453 * RA**4.8336)
        - 0.21915 * RA
    )


def _PJ(y):
    """
    pressure along the y = RM or x = RF line:
    """

    RI = (_RF(y) + y**2) ** 0.5
    return 14.35 / RI**1.45 + 0.056 + 4 / RI**3.71 - 0.171 / RI**4.716


def _RA(x):
    """
    curve through maximum horizontal range for each isobar
    between region I and II
    x: scaled ground range in kft/kT**(1/3)
    returns y or scaled burst height
    """
    return (
        0.00009686 * x**2.045
        + 0.6857 * x**0.4906
        - 0.1176 * x**0.01869 / (1 + 296.5 * x**3.962)
        - 0.02255
    )


def _RF(y):
    """
    curve through the relative minimum above the knees
    between region II and III
    y: scaled burst height in kft/kT**(1/3)
    returns x or scaled ground range
    """
    return (
        4.106 * y**0.7555
        - 2.317 * y**0.3074
        + 10.3 * y**1.803 / (1 + 230.8 * y**2.132)
        - 2.286 * y**1.291 / (1 + 1.006 * y**2.236)
        + 0.5642
    )


def _DeltaP_s(x, y):
    """
    peak overpressure in psi
    x: scaled ground range in kft/kT**(1/3)
    y: scaled burst height in kft/kT**(1/3)
    """

    RF = _RF(y)
    RA = _RA(x)

    PD = _PD(x)
    PK = _PK(y)
    PE = _PE(x)
    PJ = _PJ(y)

    if x < RF:  # region III

        FG = x / RF
        FH = 0.09284 * FG**1.0286 + 7.696 * FG**2.513 / (1 + 7.4836 * FG**2.151)
        PL = (1 - FH) * PK + FH * PJ

        return PL

    elif y < RA:  # region I

        FB = y / RA
        FC = FB * (0.433 + 1.011 * FB) / (1 + 0.444 * FB**5)

        return (1 - FC) * PD + FC * PE

    else:  # region II

        FB = y / RA
        FC = FB * (0.433 + 1.011 * FB) / (1 + 0.444 * FB**5)

        FG = x / RF
        FH = 0.09284 * FG**1.0286 + 7.696 * FG**2.513 / (1 + 7.4836 * FG**2.151)
        PL = (1 - FH) * PK + FH * PJ

        RM = (
            -0.09175 * x**-0.3896 / (1 + 31.31 * x**3.106)
            + 0.003582
            + 0.6907 * x**0.4597 / (1 - 0.2021 * x**0.4696)
            + 0.005963 / x**1.106
        )
        FN = y * (y - RA) / (RM * (RM - RA))
        FO = 0.7717 * FN**2.743 + 0.2283 * FN**0.7
        FP = FO ** (1 + 0.00594 * (x**2 + y**2) ** (2.565 * 0.5))

        return FO * PL + (1 - FP) * FC * PE


def _Q_s(DeltaP_s, P_0=14.7):
    """
    Rankine-Hugoniot relation for dynamic pressure
    DeltaP_s: overpressure in psi
    P_0: ambient pressure in psi
    """
    gamma = 1.4  # for OP <= 300 psi
    return DeltaP_s**2 / (2 * gamma * P_0 + (gamma - 1) * DeltaP_s)


def _Q_H(x, y, P_0=14.7):
    """
    Horizontal component of dynamic pressure
    x: ground range, kft/kT**(1/3)
    y: burst height, kft/kT**(1/3)
    DeltaP_s: overpressure in psi
    P_0: ambient pressure in psi
    """
    if x < y:
        """in regular reflection region, flow is constrained to horizontal
        velocity only"""
        return _Q_s(_DeltaP_s(x, y), P_0) * x / y
    else:
        """in mach reflection region, flow is turned parallel to surface and
        the horizontal component is the total"""
        return _Q_s(_DeltaP_s(x, y), P_0)


def _D_up(gr, hob, W):
    r = (gr**2 + hob**2) ** 0.5
    m = (2 * W) ** (1 / 3)  # m'
    D_up = (
        m
        * (
            (0.2455 - 0.0115 * r / m) / (1 + 61.43 * (r / m) ** 6)
            + 2.177 * (r / m) ** 3 / (1 + 0.7567 * (r / m) ** 2 + 6.147 * (r / m) ** 3)
            - 0.05546
        )
        * 1000
    )  # positive outward wind duration in milliseconds
    return D_up


def _I(gr_0, hob, W):
    """
    Dynamic pressure horizontal impulse calculation
    gr_0: ground range under concern in kft
    hob: burst height in kft
    W: yield in kt

    returns impulse in psi-sec
    """

    t_0 = _t_a(gr_0, hob, W)
    m = W ** (1 / 3)

    r_0 = (gr_0**2 + hob**2) ** 0.5
    D_up = _D_up(gr_0, hob, W)

    IQ = 0
    N = 33
    dt = D_up / N

    for i in range(N):
        t = dt * (i + 0.5) + t_0
        gr = _inv_t_a(t, gr_0, gr_0 * 2 + 0.01, hob, W)
        r = (gr**2 + hob**2) ** 0.5
        n = (
            0.7917
            + 11.04 * r / m
            + (14.37 + 6.291 * r / m) / (1 + 28.41 * (r / m) ** 3)
        )

        Q = _Q_H(gr / m, hob / m) * (r_0 / r) ** n * (1 - ((t - t_0) / D_up) ** 2)

        IQ += Q * dt

    IQ /= 1000
    return IQ


def airburst(gr, hob, W, prettyPrint=True):
    """
    Pretty print an airburst calculation:
    gr: ground range in kilofeet
    hob: height of burst in kilofeet
    W: yield, kiloton

    returns:
    peak op,
    peak hz. dp,
    toa
    dp pos phase dur
    dp hz impulse

    """

    m = W ** (1 / 3)
    t_a = _t_a(gr, hob, W)
    DeltaP_s = _DeltaP_s(gr / m, hob / m)
    D_up = _D_up(gr, hob, W)
    Q_s = _Q_s(DeltaP_s)
    Q_H = _Q_H(gr / m, hob / m)
    IQ = _I(gr, hob, W)

    if prettyPrint:
        print("YIELD           = {:>10.3f} kT".format(W))
        print("HEIGHT OF BURST = {:>10.3f} kft".format(hob))
        print("GROUND RANGE    = {:>10.3f} kft".format(gr))

        print("------------------{:->10}---------".format(""))

        print("PEAK OVERPRES.  = {:>10.3f} psi".format(DeltaP_s))
        print("PEAK DYN.P      = {:>10.3f} psi".format(Q_s))
        print("PEAK HZ.DYN.P.  = {:>10.3f} psi".format(Q_H))
        print("TIME OF ARRIVAL = {:>10.3f} msec".format(t_a))
        print("DYN.P.POS.PHASE = {:>10.3f} msec".format(D_up))
        print("HZ.DYN.IMPULSE  = {:>10.3f} psi-sec".format(IQ))
        print("")

    return DeltaP_s, Q_H, t_a, D_up, IQ


if __name__ == "__main__":
    airburst(7.004, 2.394, 40)
